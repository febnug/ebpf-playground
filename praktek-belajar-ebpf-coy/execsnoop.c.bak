#include <stdio.h>
#include <stdlib.h>
#include <bpf/libbpf.h>
#include <bpf/bpf.h>
#include <unistd.h>
#include <signal.h>

static volatile sig_atomic_t exiting = 0;

void handle_signal(int sig) {
    exiting = 1;
}

int main(int argc, char **argv) {
    struct bpf_object *obj;
    int err;

    // Handle Ctrl-C
    signal(SIGINT, handle_signal);
    signal(SIGTERM, handle_signal);

    // Open the eBPF object file
    obj = bpf_object__open_file("execsnoop.bpf.o", NULL);
    if (libbpf_get_error(obj)) {
        fprintf(stderr, "Failed to open BPF object\n");
        return 1;
    }

    // Load the eBPF program into the kernel
    err = bpf_object__load(obj);
    if (err) {
        fprintf(stderr, "Failed to load BPF object\n");
        return 1;
    }

    // Find program inside object
    struct bpf_program *prog = bpf_object__find_program_by_name(obj, "bpf_prog");
    if (!prog) {
        fprintf(stderr, "Failed to find BPF program\n");
        return 1;
    }

    // Attach to tracepoint
    struct bpf_link *link = bpf_program__attach_tracepoint(prog, "syscalls", "sys_enter_execve");
    if (libbpf_get_error(link)) {
        fprintf(stderr, "Failed to attach BPF program\n");
        return 1;
    }

    printf("eBPF program loaded and attached! Press Ctrl-C to exit.\n");

    // Main loop
    while (!exiting) {
        sleep(1);
    }

    // Cleanup
    bpf_link__destroy(link);
    bpf_object__close(obj);

    printf("Detached and exiting.\n");
    return 0;
}
